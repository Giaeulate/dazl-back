import { UserId } from '../../users/domain/UserId';
import { UserActivationId } from './UserActivationId';
import { UserActivationDetails } from './UserActivationDetails';
import { UserActivationTimeAdded } from './UserActivationTimeAdded';
import { UserActivationActive } from './UserActivationActive';
import { UserActivationName } from './UserActivationName';
import { UserActivationMale } from './UserActivationMale';
import { UserActivationFemale } from './UserActivationFemale';
import { UserActivationActiveDate } from './UserActivationActiveDate';
import { UserActivationExpirationDate } from './UserActivationExpirationDate';
import { UserActivationLongitude } from './UserActivationLongitude';
import { UserActivationLatitude } from './UserActivationLatitude';
import { AggregateRoot } from '../../../Shared/domain/AggregateRoot';
import { UserActivationSocketId } from './UserActivationSocketId';
import { FileId } from '../../file/domain/FileId';
import { UpdatedAt } from '../../../Shared/domain/UpdatedAt';
import { CreatedAt } from '../../../Shared/domain/CreatedAt';
import { UserActivationEntityDto } from './dto/indexDto';
import { UserActivationCurrentLives } from './UserActivationCurrentLives';
import { UserActivationIsActiveSocket } from './UserActivationIsActiveSocket';
import { UserActivationIsTheLocatorActivated } from './UserActivationIsTheLocatorActivated';
import { UserActivationUserIsDeleted } from './UserActivationUserIsDeleted';
import { UserActivationAgeUpperFilter } from './UserActivationAgeUpperFilter';
import { UserActivationAgeLowerFilter } from './UserActivationAgeLowerFilter';
import { UserActivationDistanceFilter } from './UserActivationDistanceFilter';
import { UserActivationLgtb } from './UserActivationLgtb';
import { CityId } from '../../City/domain/CityId';
import { UserActivationToken } from './UserActivationToken';
export declare class UserActivation extends AggregateRoot {
    get distanceFilter(): UserActivationDistanceFilter;
    set distanceFilter(value: UserActivationDistanceFilter);
    get ageLowerFilter(): UserActivationAgeLowerFilter;
    set ageLowerFilter(value: UserActivationAgeLowerFilter);
    get ageUpperFilter(): UserActivationAgeUpperFilter;
    set ageUpperFilter(value: UserActivationAgeUpperFilter);
    get details(): UserActivationDetails;
    set details(value: UserActivationDetails);
    get isTheLocatorActivated(): UserActivationIsTheLocatorActivated;
    set isTheLocatorActivated(value: UserActivationIsTheLocatorActivated);
    set active(value: UserActivationActive);
    get active(): UserActivationActive;
    activeSession(): void;
    updateLocator(value: UserActivationIsTheLocatorActivated): void;
    changeDetails(value: UserActivationDetails): void;
    id: UserActivationId;
    cityId: CityId;
    userId: UserId;
    fileImageId: FileId;
    private _details;
    timeAdded: UserActivationTimeAdded;
    private _active;
    private _isTheLocatorActivated;
    name: UserActivationName;
    male: UserActivationMale;
    lgtb: UserActivationLgtb;
    female: UserActivationFemale;
    activeDate: UserActivationActiveDate;
    expirationDate: UserActivationExpirationDate;
    currentLives: UserActivationCurrentLives;
    private _ageUpperFilter;
    private _ageLowerFilter;
    private _distanceFilter;
    longitude: UserActivationLongitude;
    latitude: UserActivationLatitude;
    isActiveSocket: UserActivationIsActiveSocket;
    socketId: UserActivationSocketId;
    userIsDeleted: UserActivationUserIsDeleted;
    token: UserActivationToken;
    createdAt: CreatedAt;
    updatedAt: UpdatedAt;
    constructor(id: UserActivationId, cityId: CityId, userId: UserId, fileImageId: FileId, details: UserActivationDetails, name: UserActivationName, male: UserActivationMale, lgtb: UserActivationLgtb, female: UserActivationFemale, longitude: UserActivationLongitude, latitude: UserActivationLatitude, socketId: UserActivationSocketId, token: UserActivationToken);
    deactivate(): void;
    static create(plainData: {
        id: string;
        cityId: string;
        userId: string;
        fileImageId: string;
        details: string;
        name: string;
        male: boolean;
        female: boolean;
        lgtb: boolean;
        longitude: string;
        latitude: string;
        socketId: string;
        token: string;
    }): UserActivation;
    addExpirationDate(addedTime: UserActivationExpirationDate): void;
    isSocketActive(): boolean;
    isActivated(): boolean;
    isDeactivated(): boolean;
    isStillActive(): boolean;
    userDeleted(): void;
    static fromPrimitives(plainData: {
        id: string;
        cityId: string;
        userId: string;
        fileImageId: string;
        details: string;
        name: string;
        male: boolean;
        female: boolean;
        lgtb: boolean;
        longitude: string;
        latitude: string;
        socketId: string;
        token: string;
    }): UserActivation;
    toPrimitives(): UserActivationEntityDto;
    updateLatLng(params: {
        longitude: UserActivationLongitude;
        latitude: UserActivationLatitude;
    }): void;
    takeLives(): void;
    restartLive(): void;
    updateConfig(male: UserActivationMale, female: UserActivationFemale, lgtb: UserActivationLgtb): void;
}

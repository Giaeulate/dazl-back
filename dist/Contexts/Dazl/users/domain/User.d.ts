import { UserId } from './UserId';
import { UserFirstName } from './UserFirstName';
import { UserLastName } from './UserLastName';
import { UserGender } from './UserGender';
import { UserAge } from './UserAge';
import { UserName } from './UserName';
import { UserEmail } from './UserEmail';
import { UserPassword } from './UserPassword';
import { UserPopularity } from './UserPopularity';
import { UserConfirmationCode } from './UserConfirmationCode';
import { UserConfirmationTime } from './UserConfirmationTime';
import { UserStatus } from './UserStatus';
import { UserLatitude } from './UserLatitude';
import { UserLongitude } from './UserLongitude';
import { UserActiveDate } from './UserActiveDate';
import { UserExpirationDate } from './UserExpirationDate';
import { AggregateRoot } from '../../../Shared/domain/AggregateRoot';
import { CreatedAt } from '../../../Shared/domain/CreatedAt';
import { UpdatedAt } from '../../../Shared/domain/UpdatedAt';
import { UserTokenFirebase } from './UserTokenFirebase';
import { UserActive } from './UserActive';
import { UserFacebookUrl } from './UserFacebookUrl';
import { UserInstagramUrl } from './UserInstagramUrl';
import { UserWhatsappUrl } from './UserWhatsappUrl';
import { UserBadge } from './UserBadge';
import { UserEmailConfirmationCode } from './UserEmailConfirmationCode';
import { UserIsEmailConfirmed } from './UserIsEmailConfirmed';
export declare class User extends AggregateRoot {
    id: UserId;
    firstName: UserFirstName;
    lastName: UserLastName;
    gender: UserGender;
    age: UserAge;
    name: UserName;
    email: UserEmail;
    password?: UserPassword;
    popularity: UserPopularity;
    confirmationCode: UserConfirmationCode;
    confirmationTime: UserConfirmationTime;
    tokenFirebase: UserTokenFirebase;
    status: UserStatus;
    latitude: UserLatitude;
    longitude: UserLongitude;
    activeDate: UserActiveDate;
    expirationDate: UserExpirationDate;
    private _active;
    otherEmail: UserFacebookUrl;
    instagramUrl: UserInstagramUrl;
    whatsappUrl: UserWhatsappUrl;
    private _badge;
    emailConfirmationCode: UserEmailConfirmationCode;
    isEmailConfirmed: UserIsEmailConfirmed;
    createdAt: CreatedAt;
    updatedAt: UpdatedAt;
    constructor(id: UserId, firstName: UserFirstName, lastName: UserLastName, gender: UserGender, age: UserAge, name: UserName, email: UserEmail, password: UserPassword, popularity: UserPopularity, confirmationCode: UserConfirmationCode, confirmationTime: UserConfirmationTime, tokenFirebase: UserTokenFirebase, status: UserStatus, latitude: UserLatitude, longitude: UserLongitude, activeDate: UserActiveDate, expirationDate: UserExpirationDate, active: UserActive, otherEmail: UserFacebookUrl, instagramUrl: UserInstagramUrl, whatsappUrl: UserWhatsappUrl, badge: UserBadge, emailConfirmationCode: UserEmailConfirmationCode, isEmailConfirmed: UserIsEmailConfirmed);
    private static generateCode;
    static create(plainData: {
        id: string;
        firstName: string;
        lastName: string;
        gender: string;
        age: number;
        name: string;
        email: string;
        password: string;
        popularity: number;
        confirmationCode: string;
        confirmationTime: string;
        tokenFirebase: string;
        status: string;
        latitude: string;
        longitude: string;
        activeDate: string;
        expirationDate: string;
        createdAt: string;
        updatedAt: string;
    }): User;
    static fromPrimitives(plainData: {
        id: string;
        firstName: string;
        lastName: string;
        gender: string;
        age: number;
        name: string;
        email: string;
        password: string;
        popularity: number;
        confirmationCode: string;
        confirmationTime: string;
        tokenFirebase: string;
        status: string;
        latitude: string;
        longitude: string;
        activeDate: string;
        expirationDate: string;
        active: number;
        otherEmail: string;
        instagramUrl: string;
        whatsappUrl: string;
        badge: number;
        emailConfirmationCode: string;
        isEmailConfirmed: number;
        createdAt: string;
        updatedAt: string;
    }): User;
    get badge(): UserBadge;
    set badge(value: UserBadge);
    get active(): UserActive;
    set active(value: UserActive);
    desactive(): void;
    toPrimitives(): {
        id: string;
        firstName: string;
        lastName: string;
        gender: string;
        birthday: number;
        name: string;
        email: string;
        password: string;
        popularity: number;
        confirmationCode: string;
        confirmationTime: string;
        status: string;
        latitude: string;
        longitude: string;
        activeDate: string;
        expirationDate: string;
        active: number;
        otherEmail: string;
        instagramUrl: string;
        whatsappUrl: string;
        createdAt: string;
        updatedAt: string;
    };
    resetBadge(): void;
    isActiveEmail(): boolean;
    confirmEmail(): void;
}
